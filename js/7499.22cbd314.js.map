{"version":3,"file":"js/7499.22cbd314.js","mappings":"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","sources":["webpack://advanced-pet/./src/components/game/scenes/battle/BattleBoard.vue","webpack://advanced-pet/src/components/game/scenes/battle/BattleBoard.vue","webpack://advanced-pet/./src/components/game/scenes/battle/BattleBoard.vue?9c9a","webpack://advanced-pet/./src/components/game/scenes/battle/BattleBoard.vue?2f5a","webpack://advanced-pet/./src/components/game/common/chipHelper.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('g',[_c('svg',{attrs:{\"viewBox\":\"0 0 83 75\",\"width\":\"83\",\"height\":\"75\",\"x\":\"48.05\",\"y\":\"64.94\"}},[_c('rect',{attrs:{\"width\":\"83\",\"height\":\"75\",\"rx\":\"3.01\",\"ry\":\"3.01\"}}),_c('g',{attrs:{\"id\":\"Time\"}},[_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"3\",\"y\":\"64.55\",\"width\":\"76.89\",\"height\":\"7.45\"}}),_vm._l((_vm.countDownBars),function(item){return _c('rect',{key:item.id,attrs:{\"x\":item.x,\"y\":\"64.79\",\"width\":\"4.85\",\"height\":\"6.88\"}})})],2),_c('g',{staticClass:\"board\"},[_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"2.95\",\"y\":\"2.98\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"29.55\",\"y\":\"44.06\",\"width\":\"24\",\"height\":\"17.96\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"56.14\",\"y\":\"44.02\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"56.14\",\"y\":\"2.93\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"56.14\",\"y\":\"23.56\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"2.95\",\"y\":\"23.49\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"2.96\",\"y\":\"44.01\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"29.55\",\"y\":\"3.07\",\"width\":\"24\",\"height\":\"18\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"29.5\",\"y\":\"23.49\",\"width\":\"24\",\"height\":\"18\"}})]),_vm._l((this.boardItems),function(item){return _c('g',{key:item.id + '_' + item.type,staticClass:\"board-item\",style:({ transform: 'translate('+ item.posX+'px,'+ item.posY + 'px)'})},[(item.type === 'attack' && item.canShow)?_c('path',{attrs:{\"id\":\"Selected\",\"d\":\"M27,8.05V5.48H24.29V8H21.62V5.48h2.67V3H21.61V5.47H18.94V3H16.31V5.51H19V8.07h2.65v2.56h2.67V13.2H21.62V10.63H19V8.07H16.31V5.54H13.64V3H11V5.54H8.29V3H5.62V5.54H3v7.82H5.62v2.56H3v2.46H5.62V21H8.29v-2.5H5.62V15.92H8.29v2.46H11V21h2.67V18.45H11V15.89h2.67v2.56h2.66V21H19V18.35h2.66V15.79H19v2.56H16.29V15.79H13.63V13.23H11V10.67h2.66V8.11H11V5.54h2.67V8.11h2.65v2.56H13.63v2.56h2.66V10.67H19v2.56H16.29v2.56H19V13.23h2.67v2.56h2.67v2.54H21.63V21h2.66V18.35H27V15.76H24.3V13.2H27V10.6H24.29V8.05ZM5.62,10.76H3V8.2H5.62Zm0-5.22H8.29V8.11H5.62Zm2.67,7.78H5.62V10.76H8.29Zm0-5.21H11v2.56H8.29ZM11,15.89H8.29V13.32H11Z\"}}):_vm._e(),(item.type === 'blocked')?_c('polygon',{staticClass:\"move-blocked\",attrs:{\"data-name\":\"Blocked\",\"points\":\"21.78 10.63 21.78 8.09 24.36 8.09 24.36 5.55 26.95 5.55 26.95 2.98 21.78 2.98 21.78 5.55 16.43 5.55 16.43 8.09 13.75 8.09 13.75 5.55 11.09 5.55 11.09 8.09 8.29 8.09 8.29 5.55 5.58 5.55 5.58 2.98 2.95 2.98 2.95 8.12 5.58 8.12 5.58 10.63 8.29 10.63 8.29 15.46 5.58 15.46 5.58 18.44 3.04 18.44 3.04 18.45 2.95 18.45 2.95 20.98 3.04 20.98 3.11 20.98 8.29 20.98 8.29 18.44 11.09 18.44 11.09 20.98 13.75 20.98 13.75 18.37 11.09 18.37 11.09 15.46 13.75 15.46 13.75 13.16 16.43 13.16 16.43 15.71 19.05 15.71 19.05 18.44 21.78 18.44 21.78 20.98 24.36 20.98 24.36 18.44 24.36 15.77 26.95 15.77 26.95 13.16 24.36 13.16 24.36 15.71 21.78 15.71 21.78 13.16 19.05 13.16 19.05 10.63 21.78 10.63\"}}):_vm._e(),(item.type === 'virus')?_c('g',[_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"10.87\",\"y\":\"11.91\",\"width\":\"2.35\",\"height\":\"2.35\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"17.87\",\"y\":\"11.89\",\"width\":\"2.35\",\"height\":\"2.35\"}}),_c('path',{attrs:{\"d\":\"M22.26,16.34V9.57h-2v-2H10.87v2h-2v6.77h2v2.31H8.76V21H13.2V18.65h4.38V21h4.66V18.65h-2V16.34Zm-9-2.11H10.87V11.91h2.35Zm4.65,0V11.91h2.35v2.32Z\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"13.2\",\"y\":\"18.65\",\"width\":\"4.37\",\"height\":\"2.31\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"22.26 7.25 10.87 7.25 10.87 7.29 8.76 7.29 8.76 7.29 8.37 7.29 8.37 20.96 8.83 20.96 8.83 18.65 10.87 18.65 10.87 16.34 8.83 16.34 8.83 9.57 10.87 9.57 10.87 7.56 20.22 7.56 20.22 9.6 22.26 9.6 22.26 16.34 20.22 16.34 20.22 18.65 22.26 18.65 22.26 20.96 22.68 20.96 22.68 7.25 22.26 7.25\"}})]):_vm._e(),(item.type === 'navi')?_c('g',[_c('g',[_c('polygon',{attrs:{\"points\":\"17.94 19.66 17.94 15.33 16.57 15.33 16.57 12.52 19.28 12.52 19.28 11.12 19.28 9.72 17.91 9.72 17.91 11.12 16.57 11.12 16.57 8.34 17.94 8.34 17.94 6.96 17.94 4.05 15.13 4.05 15.13 6.96 13.8 6.96 13.8 8.34 10.95 8.34 10.95 9.73 10.95 11.13 9.39 11.13 9.39 12.59 10.95 12.59 12.37 12.59 12.37 9.73 13.8 9.73 13.8 13.8 12.37 13.8 12.37 19.57 12.37 19.57 12.37 19.66 11.07 19.66 11.07 20.99 13.8 20.99 13.8 19.66 13.8 19.57 13.8 16.84 16.57 16.84 16.57 19.66 16.57 20.99 19.31 20.99 19.31 19.66 17.94 19.66\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"13.8\",\"y\":\"16.79\",\"width\":\"2.77\",\"height\":\"4.2\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"19.71 3 19.71 2.97 19.28 2.97 18.69 2.97 15.13 2.97 13.8 2.97 13.8 5.52 10.95 5.52 9.39 5.52 9.39 11.13 10.95 11.13 10.95 8.34 13.8 8.34 13.8 6.96 15.13 6.96 15.13 4.05 17.94 4.05 17.94 8.35 17.91 8.35 17.91 8.34 16.57 8.34 16.57 11.12 17.91 11.12 17.91 9.72 18.69 9.72 18.69 9.73 19.31 9.73 19.31 12.54 19.28 12.54 18.69 12.54 16.57 12.54 16.57 15.36 17.93 15.36 17.93 19.66 18.69 19.66 19.28 19.66 19.31 19.66 19.31 20.96 19.94 20.96 19.94 3 19.71 3\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"12.37 9.73 12.37 12.56 9.39 12.56 9.39 13.79 9.39 15.29 9.39 16.84 9.39 19.66 9.39 20.96 11.07 20.96 11.07 19.66 12.37 19.66 12.37 13.79 13.8 13.79 13.8 9.73 12.37 9.73\"}})])]):_vm._e(),(item.type === 'player')?_c('g',{staticClass:\"player\"},[(item.turnType === 'defense')?_c('g',[_c('polygon',{attrs:{\"points\":\"17.94 19.66 17.94 15.33 16.57 15.33 16.57 12.52 19.28 12.52 19.28 11.12 19.28 9.72 17.91 9.72 17.91 11.12 16.57 11.12 16.57 8.34 17.94 8.34 17.94 6.96 17.94 4.05 15.13 4.05 15.13 6.96 13.8 6.96 13.8 8.34 10.95 8.34 10.95 9.73 10.95 11.13 9.39 11.13 9.39 12.59 10.95 12.59 12.37 12.59 12.37 9.73 13.8 9.73 13.8 13.8 12.37 13.8 12.37 19.57 12.37 19.57 12.37 19.66 11.07 19.66 11.07 20.99 13.8 20.99 13.8 19.66 13.8 19.57 13.8 16.84 16.57 16.84 16.57 19.66 16.57 20.99 19.31 20.99 19.31 19.66 17.94 19.66\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"13.8\",\"y\":\"16.79\",\"width\":\"2.77\",\"height\":\"4.2\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"19.71 3 19.71 2.97 19.28 2.97 18.69 2.97 15.13 2.97 13.8 2.97 13.8 5.52 10.95 5.52 9.39 5.52 9.39 11.13 10.95 11.13 10.95 8.34 13.8 8.34 13.8 6.96 15.13 6.96 15.13 4.05 17.94 4.05 17.94 8.35 17.91 8.35 17.91 8.34 16.57 8.34 16.57 11.12 17.91 11.12 17.91 9.72 18.69 9.72 18.69 9.73 19.31 9.73 19.31 12.54 19.28 12.54 18.69 12.54 16.57 12.54 16.57 15.36 17.93 15.36 17.93 19.66 18.69 19.66 19.28 19.66 19.31 19.66 19.31 20.96 19.94 20.96 19.94 3 19.71 3\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"12.37 9.73 12.37 12.56 9.39 12.56 9.39 13.79 9.39 15.29 9.39 16.84 9.39 19.66 9.39 20.96 11.07 20.96 11.07 19.66 12.37 19.66 12.37 13.79 13.8 13.79 13.8 9.73 12.37 9.73\"}})]):_vm._e(),(item.turnType === 'attack')?_c('g',[_c('polygon',{attrs:{\"points\":\"11.39 19.66 11.39 15.33 12.76 15.33 12.76 12.52 10.04 12.52 10.04 11.12 10.04 9.72 11.41 9.72 11.41 11.12 12.76 11.12 12.76 8.34 11.39 8.34 11.39 6.96 11.39 4.05 14.2 4.05 14.2 6.96 15.53 6.96 15.53 8.34 18.38 8.34 18.38 9.73 18.38 11.13 19.94 11.13 19.94 12.59 18.38 12.59 16.95 12.59 16.95 9.73 15.53 9.73 15.53 13.8 16.95 13.8 16.95 19.57 16.95 19.57 16.95 19.66 18.26 19.66 18.26 20.99 15.53 20.99 15.53 19.66 15.53 19.57 15.53 16.84 12.76 16.84 12.76 19.66 12.76 20.99 10.02 20.99 10.02 19.66 11.39 19.66\"}}),_c('rect',{staticClass:\"primary-color\",attrs:{\"x\":\"12.76\",\"y\":\"16.79\",\"width\":\"2.77\",\"height\":\"4.2\",\"transform\":\"translate(28.29 37.78) rotate(-180)\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"9.62 3 9.62 2.97 10.04 2.97 10.64 2.97 14.2 2.97 15.53 2.97 15.53 5.52 18.38 5.52 19.94 5.52 19.94 11.13 18.38 11.13 18.38 8.34 15.53 8.34 15.53 6.96 14.2 6.96 14.2 4.05 11.39 4.05 11.39 8.35 11.41 8.35 11.41 8.34 12.76 8.34 12.76 11.12 11.41 11.12 11.41 9.72 10.64 9.72 10.64 9.73 10.02 9.73 10.02 12.54 10.04 12.54 10.64 12.54 12.76 12.54 12.76 15.36 11.4 15.36 11.4 19.66 10.64 19.66 10.04 19.66 10.02 19.66 10.02 20.96 9.39 20.96 9.39 3 9.62 3\"}}),_c('polygon',{staticClass:\"primary-color\",attrs:{\"points\":\"16.95 9.73 16.95 12.56 19.94 12.56 19.94 13.79 19.94 15.29 19.94 16.84 19.94 19.66 19.94 20.96 18.26 20.96 18.26 19.66 16.95 19.66 16.95 13.79 15.53 13.79 15.53 9.73 16.95 9.73\"}})]):_vm._e()]):_vm._e()])})],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <g>\n        <svg viewBox=\"0 0 83 75\" width=\"83\" height=\"75\" x=\"48.05\" y=\"64.94\">\n            <rect width=\"83\" height=\"75\" rx=\"3.01\" ry=\"3.01\" />\n            <g id=\"Time\">\n                <rect class=\"primary-color\" x=\"3\" y=\"64.55\" width=\"76.89\" height=\"7.45\" />\n                <rect v-for=\"item in countDownBars\" \n                    :key=\"item.id\" :x=\"item.x\" y=\"64.79\" width=\"4.85\" height=\"6.88\"  />                \n            </g>\n\n            <g class=\"board\">\n                <rect class=\"primary-color\" x=\"2.95\" y=\"2.98\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"29.55\" y=\"44.06\" width=\"24\" height=\"17.96\" />\n                <rect class=\"primary-color\" x=\"56.14\" y=\"44.02\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"56.14\" y=\"2.93\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"56.14\" y=\"23.56\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"2.95\" y=\"23.49\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"2.96\" y=\"44.01\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"29.55\" y=\"3.07\" width=\"24\" height=\"18\" />\n                <rect class=\"primary-color\" x=\"29.5\" y=\"23.49\" width=\"24\" height=\"18\" />\n            </g>\n\n            <g class=\"board-item\" v-for=\"item in this.boardItems\" :key=\"item.id + '_' + item.type\" \n                :style=\"{ transform: 'translate('+ item.posX+'px,'+ item.posY + 'px)'}\">\n\n                <path v-if=\"item.type === 'attack' && item.canShow\" id=\"Selected\" d=\"M27,8.05V5.48H24.29V8H21.62V5.48h2.67V3H21.61V5.47H18.94V3H16.31V5.51H19V8.07h2.65v2.56h2.67V13.2H21.62V10.63H19V8.07H16.31V5.54H13.64V3H11V5.54H8.29V3H5.62V5.54H3v7.82H5.62v2.56H3v2.46H5.62V21H8.29v-2.5H5.62V15.92H8.29v2.46H11V21h2.67V18.45H11V15.89h2.67v2.56h2.66V21H19V18.35h2.66V15.79H19v2.56H16.29V15.79H13.63V13.23H11V10.67h2.66V8.11H11V5.54h2.67V8.11h2.65v2.56H13.63v2.56h2.66V10.67H19v2.56H16.29v2.56H19V13.23h2.67v2.56h2.67v2.54H21.63V21h2.66V18.35H27V15.76H24.3V13.2H27V10.6H24.29V8.05ZM5.62,10.76H3V8.2H5.62Zm0-5.22H8.29V8.11H5.62Zm2.67,7.78H5.62V10.76H8.29Zm0-5.21H11v2.56H8.29ZM11,15.89H8.29V13.32H11Z\" />\n                <polygon v-if=\"item.type === 'blocked'\" class=\"move-blocked\" data-name=\"Blocked\" points=\"21.78 10.63 21.78 8.09 24.36 8.09 24.36 5.55 26.95 5.55 26.95 2.98 21.78 2.98 21.78 5.55 16.43 5.55 16.43 8.09 13.75 8.09 13.75 5.55 11.09 5.55 11.09 8.09 8.29 8.09 8.29 5.55 5.58 5.55 5.58 2.98 2.95 2.98 2.95 8.12 5.58 8.12 5.58 10.63 8.29 10.63 8.29 15.46 5.58 15.46 5.58 18.44 3.04 18.44 3.04 18.45 2.95 18.45 2.95 20.98 3.04 20.98 3.11 20.98 8.29 20.98 8.29 18.44 11.09 18.44 11.09 20.98 13.75 20.98 13.75 18.37 11.09 18.37 11.09 15.46 13.75 15.46 13.75 13.16 16.43 13.16 16.43 15.71 19.05 15.71 19.05 18.44 21.78 18.44 21.78 20.98 24.36 20.98 24.36 18.44 24.36 15.77 26.95 15.77 26.95 13.16 24.36 13.16 24.36 15.71 21.78 15.71 21.78 13.16 19.05 13.16 19.05 10.63 21.78 10.63\" />\n               \n                <g v-if=\"item.type === 'virus'\">\n                    <rect class=\"primary-color\" x=\"10.87\" y=\"11.91\" width=\"2.35\" height=\"2.35\" />\n                    <rect class=\"primary-color\" x=\"17.87\" y=\"11.89\" width=\"2.35\" height=\"2.35\" />\n                    <path d=\"M22.26,16.34V9.57h-2v-2H10.87v2h-2v6.77h2v2.31H8.76V21H13.2V18.65h4.38V21h4.66V18.65h-2V16.34Zm-9-2.11H10.87V11.91h2.35Zm4.65,0V11.91h2.35v2.32Z\" />\n                    <rect class=\"primary-color\" x=\"13.2\" y=\"18.65\" width=\"4.37\" height=\"2.31\" />\n                    <polygon class=\"primary-color\" points=\"22.26 7.25 10.87 7.25 10.87 7.29 8.76 7.29 8.76 7.29 8.37 7.29 8.37 20.96 8.83 20.96 8.83 18.65 10.87 18.65 10.87 16.34 8.83 16.34 8.83 9.57 10.87 9.57 10.87 7.56 20.22 7.56 20.22 9.6 22.26 9.6 22.26 16.34 20.22 16.34 20.22 18.65 22.26 18.65 22.26 20.96 22.68 20.96 22.68 7.25 22.26 7.25\" />\n                </g>\n\n                <g v-if=\"item.type === 'navi'\">\n                    <g >\n                        <polygon points=\"17.94 19.66 17.94 15.33 16.57 15.33 16.57 12.52 19.28 12.52 19.28 11.12 19.28 9.72 17.91 9.72 17.91 11.12 16.57 11.12 16.57 8.34 17.94 8.34 17.94 6.96 17.94 4.05 15.13 4.05 15.13 6.96 13.8 6.96 13.8 8.34 10.95 8.34 10.95 9.73 10.95 11.13 9.39 11.13 9.39 12.59 10.95 12.59 12.37 12.59 12.37 9.73 13.8 9.73 13.8 13.8 12.37 13.8 12.37 19.57 12.37 19.57 12.37 19.66 11.07 19.66 11.07 20.99 13.8 20.99 13.8 19.66 13.8 19.57 13.8 16.84 16.57 16.84 16.57 19.66 16.57 20.99 19.31 20.99 19.31 19.66 17.94 19.66\" />\n                        <rect class=\"primary-color\" x=\"13.8\" y=\"16.79\" width=\"2.77\" height=\"4.2\" />\n                        <polygon class=\"primary-color\" points=\"19.71 3 19.71 2.97 19.28 2.97 18.69 2.97 15.13 2.97 13.8 2.97 13.8 5.52 10.95 5.52 9.39 5.52 9.39 11.13 10.95 11.13 10.95 8.34 13.8 8.34 13.8 6.96 15.13 6.96 15.13 4.05 17.94 4.05 17.94 8.35 17.91 8.35 17.91 8.34 16.57 8.34 16.57 11.12 17.91 11.12 17.91 9.72 18.69 9.72 18.69 9.73 19.31 9.73 19.31 12.54 19.28 12.54 18.69 12.54 16.57 12.54 16.57 15.36 17.93 15.36 17.93 19.66 18.69 19.66 19.28 19.66 19.31 19.66 19.31 20.96 19.94 20.96 19.94 3 19.71 3\" />\n                        <polygon class=\"primary-color\" points=\"12.37 9.73 12.37 12.56 9.39 12.56 9.39 13.79 9.39 15.29 9.39 16.84 9.39 19.66 9.39 20.96 11.07 20.96 11.07 19.66 12.37 19.66 12.37 13.79 13.8 13.79 13.8 9.73 12.37 9.73\" />\n                    </g>                   \n                </g>\n\n                <g class=\"player\" v-if=\"item.type === 'player'\">\n                    <g v-if=\"item.turnType === 'defense'\">\n                        <polygon points=\"17.94 19.66 17.94 15.33 16.57 15.33 16.57 12.52 19.28 12.52 19.28 11.12 19.28 9.72 17.91 9.72 17.91 11.12 16.57 11.12 16.57 8.34 17.94 8.34 17.94 6.96 17.94 4.05 15.13 4.05 15.13 6.96 13.8 6.96 13.8 8.34 10.95 8.34 10.95 9.73 10.95 11.13 9.39 11.13 9.39 12.59 10.95 12.59 12.37 12.59 12.37 9.73 13.8 9.73 13.8 13.8 12.37 13.8 12.37 19.57 12.37 19.57 12.37 19.66 11.07 19.66 11.07 20.99 13.8 20.99 13.8 19.66 13.8 19.57 13.8 16.84 16.57 16.84 16.57 19.66 16.57 20.99 19.31 20.99 19.31 19.66 17.94 19.66\" />\n                        <rect class=\"primary-color\" x=\"13.8\" y=\"16.79\" width=\"2.77\" height=\"4.2\" />\n                        <polygon class=\"primary-color\" points=\"19.71 3 19.71 2.97 19.28 2.97 18.69 2.97 15.13 2.97 13.8 2.97 13.8 5.52 10.95 5.52 9.39 5.52 9.39 11.13 10.95 11.13 10.95 8.34 13.8 8.34 13.8 6.96 15.13 6.96 15.13 4.05 17.94 4.05 17.94 8.35 17.91 8.35 17.91 8.34 16.57 8.34 16.57 11.12 17.91 11.12 17.91 9.72 18.69 9.72 18.69 9.73 19.31 9.73 19.31 12.54 19.28 12.54 18.69 12.54 16.57 12.54 16.57 15.36 17.93 15.36 17.93 19.66 18.69 19.66 19.28 19.66 19.31 19.66 19.31 20.96 19.94 20.96 19.94 3 19.71 3\" />\n                        <polygon class=\"primary-color\" points=\"12.37 9.73 12.37 12.56 9.39 12.56 9.39 13.79 9.39 15.29 9.39 16.84 9.39 19.66 9.39 20.96 11.07 20.96 11.07 19.66 12.37 19.66 12.37 13.79 13.8 13.79 13.8 9.73 12.37 9.73\" />\n                    </g>\n                    <g v-if=\"item.turnType === 'attack'\">\n                        <polygon points=\"11.39 19.66 11.39 15.33 12.76 15.33 12.76 12.52 10.04 12.52 10.04 11.12 10.04 9.72 11.41 9.72 11.41 11.12 12.76 11.12 12.76 8.34 11.39 8.34 11.39 6.96 11.39 4.05 14.2 4.05 14.2 6.96 15.53 6.96 15.53 8.34 18.38 8.34 18.38 9.73 18.38 11.13 19.94 11.13 19.94 12.59 18.38 12.59 16.95 12.59 16.95 9.73 15.53 9.73 15.53 13.8 16.95 13.8 16.95 19.57 16.95 19.57 16.95 19.66 18.26 19.66 18.26 20.99 15.53 20.99 15.53 19.66 15.53 19.57 15.53 16.84 12.76 16.84 12.76 19.66 12.76 20.99 10.02 20.99 10.02 19.66 11.39 19.66\" />\n                        <rect class=\"primary-color\" x=\"12.76\" y=\"16.79\" width=\"2.77\" height=\"4.2\" transform=\"translate(28.29 37.78) rotate(-180)\" />\n                        <polygon class=\"primary-color\" points=\"9.62 3 9.62 2.97 10.04 2.97 10.64 2.97 14.2 2.97 15.53 2.97 15.53 5.52 18.38 5.52 19.94 5.52 19.94 11.13 18.38 11.13 18.38 8.34 15.53 8.34 15.53 6.96 14.2 6.96 14.2 4.05 11.39 4.05 11.39 8.35 11.41 8.35 11.41 8.34 12.76 8.34 12.76 11.12 11.41 11.12 11.41 9.72 10.64 9.72 10.64 9.73 10.02 9.73 10.02 12.54 10.04 12.54 10.64 12.54 12.76 12.54 12.76 15.36 11.4 15.36 11.4 19.66 10.64 19.66 10.04 19.66 10.02 19.66 10.02 20.96 9.39 20.96 9.39 3 9.62 3\" />\n                        <polygon class=\"primary-color\" points=\"16.95 9.73 16.95 12.56 19.94 12.56 19.94 13.79 19.94 15.29 19.94 16.84 19.94 19.66 19.94 20.96 18.26 20.96 18.26 19.66 16.95 19.66 16.95 13.79 15.53 13.79 15.53 9.73 16.95 9.73\" />\n                    </g>\n                </g>\n            </g>\n            \n        </svg>      \n    </g>\n</template>\n\n<script>\nimport { mapGetters, mapState } from 'vuex';\nimport { SceneNames, Events, BattleTypes, TurnTypes, EnemyTypes, BattleActionTypes, ElementTypes } from '../../../../global/constants.js';\nimport EventBus from '../../../../global/eventBus.js';\nimport { getChipAttackArea, getSupportChipEffectById } from '../../common/chipHelper';\n\nexport default {\n    name: \"BattleBoard\",\n    data() {\n        return {\n            boardItems: [],\n            countDownBars: [\n                { id: 1, x: \"4.44\"},\n                { id: 2, x: \"12.11\"},  \n                { id: 3, x: \"19.78\"},\n                { id: 4, x: \"27.44\"},\n                { id: 5, x: \"35.11\"},\n                { id: 6, x: \"42.77\"},    \n                { id: 7, x: \"50.44\"},\n                { id: 8, x: \"58.11\"},\n                { id: 9, x: \"65.77\"},\n                { id: 10, x: \"73.44\"}                                                                                                                                      \n            ],\n            countDownInterval: null,\n            enemyInterval: null       \n        }\n    },\n    computed: {\n        ...mapState({\n            turnType: state => state.battle.turnType,\n            battleType: state => state.battle.type,\n            enemy: state => state.battle.enemy,\n            player: state => state.battle.player\n        }),        \n        ...mapGetters({\n            attackChip: 'battle/getAttackChip',\n            supportChip: 'battle/getSupportChip'\n        })       \n    },\n    mounted() {\n        this.registerListeners();\n\n        var blockedPanels = this.ramdomBlockedPanels();\n\n        if(this.battleType === BattleTypes.AI) {\n            this.startGame(blockedPanels);\n        } else {\n            if(this.turnType === TurnTypes.Attack) {\n                //Start turn between players\n                this.$socket.client.emit('startTurn', this.$store.state.battle.id, blockedPanels);\n            }\n        }\n    },\n    beforeDestroy() {\n        this.unregisterListeners();\n    },\n    sockets: {\n        startTurnResult(blockedItems) {\n           this.startGame(blockedItems); \n        },\n        defensePosition(defensePosition) {\n            //Fix bug of defense been added after all the other items\n            setTimeout(() => {\n                defensePosition.turnType = this.$store.state.battle.turnType;\n\n                var currentDefenseIndex = this.boardItems.findIndex(x => x.type === \"player\");\n                \n                if(currentDefenseIndex > 0) {\n                    this.boardItems.splice(currentDefenseIndex, 1);\n                }\n\n                this.boardItems.push(defensePosition);\n            }, 2);\n        },\n        attackPosition(attackPositions) {\n            //Remove old attack areas\n            this.boardItems = this.boardItems.filter(function(item) {\n                return item.type !== \"attack\"\n            });\n\n            //Add elements always at beginning of the items\n            attackPositions.forEach(element => {\n                this.boardItems.splice(0, 0, element)\n            });\n        },\n        fireAttack(isAttackHit, attackPower) {\n            if(this.turnType === TurnTypes.Defense) {\n                if(isAttackHit) {\n                    this.$store.commit('battle/addBattleAction', {\n                        type: BattleActionTypes.PlayerHP, \n                        value: -parseInt(attackPower)\n                    });\n                }\n            } else {\n                if(isAttackHit) {\n                    this.$store.commit('battle/addBattleAction', {\n                        type: BattleActionTypes.EnemyDamage, \n                        value: -parseInt(attackPower)\n                    });\n                }\n            }\n\n            this.$store.commit('battle/setIsAttackHit', isAttackHit);\n            this.$store.commit('session/setCurrentScene', SceneNames.BattleFireAttack);\n\n            this.$socket.client.emit('updateNaviStaus', this.$store.state.battle.id, this.$store.state.battle.player.naviStatus);\n        }\n    },\n    methods: {\n        registerListeners() {\n            EventBus.$on(Events.Up, () => this.moveTo(Events.Up));\n            EventBus.$on(Events.Down, () => this.moveTo(Events.Down));\n\n            EventBus.$on(Events.Right, () => this.moveTo(Events.Right));\n            EventBus.$on(Events.Left, () => this.moveTo(Events.Left));\n            EventBus.$on(Events.Confirmation, this.onConfirmation);\n        },\n        unregisterListeners() {\n            EventBus.$off(Events.Up);\n            EventBus.$off(Events.Down);\n            EventBus.$off(Events.Right);\n            EventBus.$off(Events.Left);\n            EventBus.$off(Events.Confirmation);\n        },\n        startCountDown: function() {\n            var time = 500;\n\n            if(this.supportChip && this.supportChip.Id === \"120\") {\n                time = getSupportChipEffectById(this.supportChip.Id).value;\n            }\n\n            this.countDownInterval = setInterval(() => {\n                if(this.countDownBars.length > 0) {\n                    this.countDownBars.splice(this.countDownBars.length - 1, 1);\n\n                    if(this.countDownBars.length === 0) {\n                        this.onConfirmation();\n                    }\n                }\n            }, time);\n        },\n        startGame(blockedItems) {\n            this.startCountDown();\n\n            //Create board with blocked items\n            blockedItems.forEach(element => {\n                var item = {\n                    id: `${element.row}_${element.column}`,\n                    type: 'blocked',\n                    posX: element.column * 26.6,\n                    posY: element.row * 20.5\n                }\n\n                this.boardItems.push(item);\n            });\n\n            //Adde attack area or player to the board depending of the current turn type\n            if(this.turnType === TurnTypes.Attack) {\n                this.addAttackPatternToBoard(this.getChipArea());\n\n                if(this.battleType === BattleTypes.AI) {\n                    this.addEnemyToBoard();\n                    this.startEnemyMovement();\n                }\n            } else { //Defense\n                this.addEnemyToBoard();\n            }           \n        },\n        addAttackPatternToBoard(chipArea) {\n            var attackAreaItems = [];\n\n            for (let i = 0; i < chipArea.length; i++) {\n                for (let j = 0; j < chipArea.length; j++) {\n                    var id = `${i}_${j}`;\n\n                    //Just add the attack range to the board at the specific index if is not a blocked area\n                    if(chipArea[i][j] === 1) {\n                        var item = {\n                            id: id,\n                            type: 'attack',\n                            canShow: this.boardItems.some(x => x.id === id && x.type === 'blocked') === false, //just show if don't have a blocked aread at the same index\n                            posX: j * 26.6,\n                            posY: i * 20.5\n                        }\n                        attackAreaItems.push(item);\n                    }\n                }\n            }\n\n            this.boardItems = this.boardItems.concat(attackAreaItems);\n            //Send socket for attack area\n            this.$socket.client.emit('attackMove', this.$store.state.battle.id, attackAreaItems);   \n        },\n        addEnemyToBoard() {\n            //Ramdom index where enemy will be added, cannot be blocked.\n            do {\n                var row = Math.floor(Math.random() * 3);\n                var column = Math.floor(Math.random() * 3);\n                var id = `${row}_${column}`;\n\n            } while (this.boardItems.some(x => x.id === id && x.type === 'blocked'));\n\n            var enemyType = \"\";\n            if(this.enemy.type === EnemyTypes.Virus) {\n                enemyType = \"virus\";\n            } else if(this.enemy.type === EnemyTypes.Boss) {\n                enemyType = \"navi\";\n            } else {\n                enemyType = \"player\"\n            }\n\n            var enemyItem = {\n                id: `${row}_${column}`,\n                type: enemyType,\n                turnType: this.turnType,\n                posX: column * 26.6,\n                posY: row * 20.5   \n            }   \n            \n            this.boardItems.push(enemyItem); \n\n            if(this.battleType === BattleTypes.Player) {\n                //Send socket for players\n                this.$socket.client.emit('defenseMove', this.$store.state.battle.id, enemyItem);\n            }\n        },\n        moveTo(position) {\n            if(this.turnType === TurnTypes.Attack) {\n                this.moveAttackTo(position);\n            } else {\n                this.moveCharacterTo(position)\n            }\n        },\n        moveAttackTo(position) {\n            var attackAreas = this.boardItems.filter(function(item) {\n                return item.type === \"attack\"\n            });\n\n            if(attackAreas) {\n                var newAttackAreas = [];\n                var canAddItems = true;\n\n                for (let i = 0; i < attackAreas.length; i++) {\n                    const element = attackAreas[i];\n                    \n                    var strArr = element.id.split(\"_\");\n                    var atkRow = parseInt(strArr[0]), atkColumn = parseInt(strArr[1]);\n\n                    switch (position) {\n                        case Events.Up:\n                            atkRow -= 1;\n                            break;\n                        case Events.Down:\n                            atkRow += 1;\n                            break;\n                        case Events.Left:\n                            atkColumn -= 1;\n                            break; \n                        case Events.Right:\n                            atkColumn += 1;\n                            break;                                                 \n                    }     \n\n                    var chipArea = this.getChipArea(this.attackChip);\n\n                    if((atkRow >= 0 && atkRow <= 2) && (atkColumn >= 0 && atkColumn <= 2) &&\n                    chipArea[atkRow][atkColumn] >= 0) {\n\n                        var area = {\n                            id: `${atkRow}_${atkColumn}`,\n                            type: 'attack',\n                            canShow: !this.boardItems.some(x => x.id === `${atkRow}_${atkColumn}` && x.type === 'blocked'),\n                            posX: atkColumn * 26.6,\n                            posY: atkRow * 20.5\n                        }\n                        \n                        newAttackAreas.push(area);  \n                    } else {\n                        canAddItems = false;\n                        break;\n                    }\n                }\n\n                if(canAddItems && newAttackAreas.length > 0) {\n                    //Remove old attack areas\n                    this.boardItems = this.boardItems.filter(function(item) {\n                        return item.type !== \"attack\"\n                    });\n\n                    this.boardItems = this.boardItems.concat(newAttackAreas);\n\n                    if(this.battleType === BattleTypes.Player) {\n                        //Send socket for attack area\n                        this.$socket.client.emit('attackMove', this.$store.state.battle.id, newAttackAreas);\n                    }\n                }\n            }\n        },\n        moveCharacterTo(position) {\n            //Move the defense character \n            var enemy = this.boardItems\n                .find(x => x.type === 'player' || x.type === 'virus' || x.type === 'navi');\n\n            if(enemy) {\n                var arry = enemy.id.split(\"_\");\n                var row = parseInt(arry[0]), column = parseInt(arry[1]);\n\n                switch (position) {\n                    case Events.Up:\n                        row -= 1;\n                        break;\n                    case Events.Down:\n                        row += 1;\n                        break;\n                    case Events.Left:\n                        column -= 1;\n                        break; \n                    case Events.Right:\n                        column += 1;\n                        break;                                                 \n                }\n\n                //Just move to row_column if is not blocked or  beggning/end of the matrix\n                var newPosId = `${row}_${column}`;\n                if(!this.boardItems.some(x => x.id === newPosId && x.type === 'blocked') &&\n                    (row >= 0 && row <= 2) && (column >= 0 && column <= 2)) {\n                        //remove the current defense from the list\n                        this.boardItems.splice(this.boardItems.indexOf(enemy), 1);\n\n                        enemy.id = newPosId;\n                        enemy.posX = column * 26.6,\n                        enemy.posY = row * 20.5\n                        \n                        this.boardItems.push(enemy);\n\n                        if(this.battleType === BattleTypes.Player) {\n                            //Send socket for player\n                            this.$socket.client.emit('defenseMove', this.$store.state.battle.id, enemy);   \n                        }\n                    }\n            }\n        },\n        getChipArea() {\n            var chipArea = null;\n            \n            if(this.attackChip) {\n                chipArea = getChipAttackArea(this.attackChip); \n            } else {\n                //If no chip was plugged use MegaBuster attack area\n                chipArea = [\n                    [0, 0, 0],\n                    [0, 1, 0],\n                    [0, 0, 0]\n                ]\n            }\n\n            return chipArea;\n        },\n        onConfirmation() {\n            if(this.turnType === TurnTypes.Attack) {\n                clearInterval(this.countDownInterval);\n                \n                if(this.enemyInterval != null) {\n                    clearInterval(this.enemyInterval);\n                }\n\n                var enemy = this.boardItems.find(x => x.type === 'player' || x.type === 'navi' || x.type === 'virus');\n                var isAttackHit = this.boardItems.some(x => x.id === enemy.id && x.type === 'attack');\n                var attackPower = 0;\n\n                if(isAttackHit) {\n                    if(this.attackChip) {\n                        attackPower = this.getAttackPower(\n                            this.attackChip.Element, this.attackChip.AT,\n                            this.enemy.element)\n                    } else {\n                        attackPower = this.getAttackPower(\n                            this.player.element, this.player.at,\n                            this.enemy.element)                        \n                    }\n                }\n\n                if(this.battleType === BattleTypes.Player) {\n                    this.$socket.client.emit('attackConfirmed', this.$store.state.battle.id, isAttackHit, attackPower);\n\n                } else {\n                    if(isAttackHit) {\n                        ///this.$store.commit('battle/setEnemyDamage', attackPower);\n                        this.$store.commit('battle/addBattleAction', {\n                            type: BattleActionTypes.EnemyDamage, \n                            value: -attackPower\n                        });\n                    }\n\n                    this.$store.commit('battle/setIsAttackHit', isAttackHit);\n                    this.$store.commit('session/setCurrentScene', SceneNames.BattleFireAttack);\n                }\n            }\n        },\n        ramdomBlockedPanels() {\n            //TODO: Chips can affect this\n            var list = [];\n\n            if(this.supportChip && \n                (this.supportChip.Id === \"091\" || this.supportChip.Id === \"092\" ||\n                this.supportChip.Id === \"093\" || this.supportChip.Id === \"116\" ||\n                this.supportChip.Id === \"117\" || this.supportChip.Id === \"123\" ||\n                this.supportChip.Id === \"124\" || this.supportChip.Id === \"125\")) {\n\n                var effect = getSupportChipEffectById(this.supportChip.Id);\n\n                for (let row = 0; row < effect.value.length; row++) {\n                    for (let col = 0; col < effect.value.length; col++) {\n                        list.push({\n                            row: row,\n                            column: col\n                        });\n                    }\n                }\n            } else {\n                var panelsCount = Math.floor(Math.random() * 2) + 1; //The panels can be 1 or 2\n\n                do {\n                    var item = {\n                        row: Math.floor(Math.random() * 3),\n                        column: Math.floor(Math.random() * 3)\n                    }\n\n                    //Just add the item if is not going to be in the middle of the matrix and not exist already\n                    if(item.column !== 1 && !list.some(x => x.row === item.row && x.column === item.column)) {\n                        list.push(item);\n                    }\n\n                } while (list.length < panelsCount);\n            }\n\n            return list;\n        },\n        startEnemyMovement() {\n            var interval = 800;\n\n            if (this.supportChip && (this.supportChip.Id === \"083\" || this.supportChip.Id === \"084\")) {\n                interval = getSupportChipEffectById(this.supportChip.Id).value;\n            }\n\n            interval -= 15 * this.enemy.level; //speedy up base on the level\n            interval = interval < 500 ? 500 : interval; //Cannot be under 1 second\n\n            var positions = [\n                Events.Up.toString(),\n                Events.Down.toString(),\n                Events.Left.toString(),\n                Events.Right.toString()\n            ];\n            this.enemyInterval = setInterval(() => {\n                var index = Math.floor(Math.random() * positions.length);\n                this.moveCharacterTo(positions[index]);\n            }, interval);\n        },\n        getAttackPower(atkElement, atkPower, defElement) {\n            var totalAtkPower = 0;\n\n            if(atkElement === ElementTypes.Neutral || defElement === ElementTypes.Neutral) {\n                totalAtkPower = atkPower;\n            }\n\n            if(atkElement === ElementTypes.Fire) {\n                if(defElement === ElementTypes.Wood) {\n                    totalAtkPower = atkPower * 2;\n                } else if(defElement === ElementTypes.Aqua) {\n                    totalAtkPower = Math.floor(atkPower / 2);\n                } else {\n                    totalAtkPower = atkPower;\n                }\n            } else if(atkElement === ElementTypes.Wood) {\n                if(defElement === ElementTypes.Elec) {\n                    totalAtkPower = atkPower * 2;\n                } else if(defElement === ElementTypes.Fire) {\n                    totalAtkPower = Math.floor(atkPower / 2);\n                } else {\n                    totalAtkPower = atkPower;\n                }\n            } else if(atkElement === ElementTypes.Elec) {\n                if(defElement === ElementTypes.Aqua) {\n                    totalAtkPower = atkPower * 2;\n                } else if(defElement === ElementTypes.Wood) {\n                    totalAtkPower = Math.floor(atkPower / 2);\n                } else {\n                    totalAtkPower = atkPower;\n                }\n            } else if(atkElement === ElementTypes.Aqua) {\n                if(defElement === ElementTypes.Fire) {\n                    totalAtkPower = atkPower * 2;\n                } else if(defElement === ElementTypes.Elec) {\n                    totalAtkPower = Math.floor(atkPower / 2);\n                } else {\n                    totalAtkPower = atkPower;\n                }\n            }\n\n            if(this.supportChip && this.supportChip.Id === \"205\") {\n                var effect = getSupportChipEffectById(this.supportChip.Id);\n                return totalAtkPower = totalAtkPower + Math.floor(effect.value * totalAtkPower);\n            } else {\n                return totalAtkPower;\n            }\n        }     \n    }     \n}\n</script>\n\n<style scoped lang=\"scss\">\n</style>","import mod from \"-!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BattleBoard.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./BattleBoard.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./BattleBoard.vue?vue&type=template&id=11c7531c&scoped=true\"\nimport script from \"./BattleBoard.vue?vue&type=script&lang=js\"\nexport * from \"./BattleBoard.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"11c7531c\",\n  null\n  \n)\n\nexport default component.exports","//Get possible combinations for the chipe attack area base on a 3x3 matrix\n//value 1 attack pattern, value 0 can move, value -1 can't move. \n/*\n    0, 0, 0\n    0, 0, 0\n    0, 0, 0\n*/\nfunction getAllAreaCombinations() {\n    const combinationList = [];\n\n    /*\n        0, -1, -1\n        1, -1, -1\n        0, -1, -1\n    */\n    combinationList.push({\n        pattern: 1,\n        matrixIndexes: [[0, -1, -1], [1, -1, -1], [0, -1, -1]]\n    });\n\n    /*\n        0, 0, 0\n        0, 1, 0\n        0, 0, 0\n    */\n    combinationList.push({\n        pattern: 2,\n        matrixIndexes: [[0, 0, 0], [0, 1, 0], [0, 0, 0]]\n    });\n\n    /*\n        0, 0, -1\n        1, 1, -1\n        0, 0, -1\n    */\n   combinationList.push({\n        pattern: 3,\n        matrixIndexes: [[0, 0, -1], [1, 1, -1], [0, 0, -1]]\n    });    \n\n    /*\n        -1, 0, 0\n        -1, 1, 1\n        -1, 0, 0\n    */\n    combinationList.push({\n        pattern: 4,\n        matrixIndexes: [[-1, 0, 0], [-1, 1, 1], [-1, 0, 0]]\n    });   \n        \n    /*\n        1, -1, -1\n        1, -1, -1\n        1, -1, -1\n    */\n    combinationList.push({\n        pattern: 5,\n        matrixIndexes: [[1, -1, -1], [1, -1, -1], [1, -1, -1]]\n    });   \n    \n    /*\n        0, 1, 0\n        0, 1, 0\n        0, 1, 0\n    */\n    combinationList.push({\n        pattern: 6,\n        matrixIndexes: [[0, 1, 0], [0, 1, 0], [0, 1, 0]]\n    });          \n\n    /*\n        -1, -1, 0\n        -1, -1, 0\n        -1, -1, 0\n    */\n    combinationList.push({\n        pattern: 7,\n        matrixIndexes: [[-1, -1, 1], [-1, -1, 1], [-1, -1, 1]]\n    });     \n\n    /*\n        0, 0, 0\n        1, 1, 1\n        0, 0, 0\n    */\n    combinationList.push({\n        pattern: 8,\n        matrixIndexes: [[0, 0, 0], [1, 1, 1], [0, 0, 0]]\n    });    \n    \n    /*\n        -1, 1, -1\n         1, 1, -1\n        -1, 1, -1\n    */\n    combinationList.push({\n        pattern: 9,\n        matrixIndexes: [[-1, 1, -1], [1, 1, -1], [-1, 1, -1]]\n    });         \n\n    /*\n        -1, -1, 1\n         1, 1, -1\n        -1, -1, 1\n    */\n    combinationList.push({\n        pattern: 10,\n        matrixIndexes: [[-1, -1, 1], [1, 1, -1], [-1, -1, 1]]\n    });   \n\n    /*\n        -1,  1, -1\n         1, -1,  1\n        -1,  1, -1\n    */\n    combinationList.push({\n        pattern: 11,\n        matrixIndexes: [[-1, 1, -1], [1, -1, 1], [-1, 1, -1]]\n    });  \n\n    /*\n        1,  1, 1\n        1, -1, 1\n        1,  1, 1\n    */\n    combinationList.push({\n        pattern: 12,\n        matrixIndexes: [[1, 1, 1], [1, -1, 1], [1, 1, 1]]\n    });      \n\n    /*\n         1,-1, 1\n        -1, 1,-1\n         1,-1, 1\n    */\n    combinationList.push({\n        pattern: 13,\n        matrixIndexes: [[1, -1, 1], [-1, 1, -1], [1,-1, 1]]\n    });   \n\n    /*\n        -1, 1,-1\n         1, 1, 1\n        -1, 1,-1\n    */\n    combinationList.push({\n        pattern: 14,\n        matrixIndexes: [[-1, 1,-1], [1, 1, 1], [-1,1,-1]]\n    });   \n\n    /*\n        1, 1, 0\n        1, 1, 0\n        1, 1, 0\n    */\n    combinationList.push({\n        pattern: 15,\n        matrixIndexes: [[1, 1,0], [1, 1, 0], [1,1,0]]\n    }); \n\n    /*\n        1, 1, 1\n       -1,-1,-1\n        1, 1, 1\n    */\n    combinationList.push({\n        pattern: 16,\n        matrixIndexes: [[1, 1, 1], [-1, -1, -1], [1,1,1]]\n    });   \n    \n    /*\n        1, 1, 1\n       -1,-1, 1\n        1, 1, 1\n    */\n    combinationList.push({\n        pattern: 17,\n        matrixIndexes: [[1, 1, 1], [-1, -1, 1], [1,1,1]]\n    });  \n    \n    /*\n        1, 1, 1\n       -1,-1, 1\n        1, 1, 1\n    */\n    combinationList.push({\n        pattern: 18,\n        matrixIndexes: [[1, 1, 1], [1, 1, 1], [1,1,1]]\n    });      \n\n    return combinationList;    \n}\n\nexport function getChipAttackArea(chip) {\n\n    var allCombinations = getAllAreaCombinations();\n    var pattern = 1;\n\n    if(chip.Pattern > 0) {\n        pattern = chip.Pattern;\n    } else {\n        if(chip.AT > 0) {\n            pattern = chip.AT - chip.CP;\n        } else {\n            pattern = chip.CP;\n        }\n    }\n\n    return allCombinations.find(x => x.pattern === pattern).matrixIndexes;\n}\n\n//The vales are based where the chip will be used in the code\nconst supportChipsEffects = [\n    { id: \"083\", value: 850, description: \"Enemy Speed Down\" }, //virus speed movement to 0.85 Seconds\n    { id: \"084\", value: 900, description: \"Enemy Speed Down\" },  //virus speed movement to 0.90 Seconds\n    { id: \"091\", value: [[0, 0, 0], [1, 0, 0], [0, 0, 0]], description: \"Breaks Painel\" },  //breaks game board in the middle on the first column\n    { id: \"092\", value: [[1, 0, 0], [0, 0, 0], [1, 0, 0]], description: \"Breaks Painel\" },  //breaks game board in the top and bottom on the first column\n    { id: \"093\", value: [[1, 0, 0], [1, 0, 0], [1, 0, 0]], description: \"Breaks Painel\" },  //breaks game board on all first column (Not original value)\n    { id: \"107\", value: 1, description: \"HP Recovery\"}, //recovers 1\n    { id: \"108\", value: 2, description: \"HP Recovery\"}, //recovers 2\n    { id: \"109\", value: 3, description: \"HP Recovery\"}, //recovers 3\n    { id: \"110\", value: 4, description: \"HP Recovery\"}, //recovers 4\n    { id: \"111\", value: 6, description: \"HP Recovery\"}, //recovers 6\n    { id: \"112\", value: 8, description: \"HP Recovery\"}, //recovers 8\n    { id: \"113\", value: 10, description: \"HP Recovery\"}, //recovers 10 (Not original value)\n    { id: \"114\", value: 12, description: \"HP Recovery\"}, //recovers 12 (Not original value)\n    { id: \"115\", value: 5, description: \"HP Recovery\"}, //recovers 5 \n    { id: \"116\", value: [[0, 0, 0], [1, 0, 0], [0, 0, 0]], description: \"Breaks Painel\" },  //breaks game board in the middle on the first column\n    { id: \"117\", value: [[1, 0, 0], [1, 0, 0], [1, 0, 0]], description: \"Breaks Painel\" },  //breaks game board on all first column \n    { id: \"120\", value: 1000, description: \"Navi ATK 20s\"}, //Megaman gets 20 seconds to attack \n    { id: \"121\", value: 1500, description: \"Enemy ATK 5s \"}, //enemy get 5 seconds to attack,\n    { id: \"123\", value: [[0, 0, 0], [1, 0, 0], [0, 0, 0]], description: \"Breaks Painel\" },  //breaks game board in the middle on the first column\n    { id: \"124\", value: [[1, 0, 0], [1, 0, 0], [1, 0, 0]], description: \"Breaks Painel\" },  //breaks game board on all first column \n    { id: \"125\", value: [[1, 0, 0], [1, 0, 0], [1, 0, 0]], description: \"Breaks Painel\" },  //breaks game board on all first column \n    { id: \"129\", value: 0.03, description: \"Evasion UP 3\" },  //evasion enemy level 3%\n    { id: \"133\", value: 0.01, description: \"Evasion UP 1\" },  //evasion enemy level 1%\n    { id: \"134\", value: 0.02, description: \"Evasion UP 2\" },  //evasion enemy level 2%\n    { id: \"135\", value: 2, description: \"Enemy ATK Down 2\" },  //enemy attack down 2\n    { id: \"136\", value: 4, description: \"Enemy ATK Down 4\" },  //enemy attack down 4\n    { id: \"137\", value: 6, description: \"Enemy ATK Down 6\" },  //enemy attack down 6 (not original value)\n    { id: \"139\", value: 8, description: \"Enemy ATK Down 8\" },  //enemy attack down 8 (not original value)\n    { id: \"201\", value: 0.1, description: \"Evasion UP 10\" },  //increase evasion enemy 10%\n    { id: \"205\", value: 0.3, description: \"Navi ATK UP 30\" },  //increase 30% navi attack power\n    { id: \"206\", value: 0.2, description: \"Enemy Miss UP 20\" },  //increase 20% enemy miss percentage\n    { id: \"208\", value: 10, description: \"Enemy ATK Down 10\" }];  //enemy attack down 10\n\n\nexport function getSupportChipEffectById(chipId) {\n    return supportChipsEffects.find(x => x.id === chipId);\n}"],"names":["render","_vm","this","_c","_self","attrs","staticClass","_l","countDownBars","item","key","id","x","boardItems","type","style","transform","posX","posY","canShow","_e","turnType","staticRenderFns","name","data","countDownInterval","enemyInterval","computed","mapState","state","battle","battleType","enemy","player","mapGetters","attackChip","supportChip","mounted","registerListeners","blockedPanels","ramdomBlockedPanels","BattleTypes","AI","startGame","TurnTypes","Attack","$socket","client","emit","$store","beforeDestroy","unregisterListeners","sockets","startTurnResult","blockedItems","defensePosition","setTimeout","currentDefenseIndex","findIndex","splice","push","attackPosition","attackPositions","filter","forEach","element","fireAttack","isAttackHit","attackPower","Defense","commit","BattleActionTypes","PlayerHP","value","parseInt","EnemyDamage","SceneNames","BattleFireAttack","naviStatus","methods","EventBus","$on","Events","Up","moveTo","Down","Right","Left","Confirmation","onConfirmation","$off","startCountDown","time","Id","getSupportChipEffectById","setInterval","length","row","column","addAttackPatternToBoard","getChipArea","addEnemyToBoard","startEnemyMovement","chipArea","attackAreaItems","i","j","some","concat","Math","floor","random","enemyType","EnemyTypes","Virus","Boss","enemyItem","Player","position","moveAttackTo","moveCharacterTo","attackAreas","newAttackAreas","canAddItems","strArr","split","atkRow","atkColumn","area","find","arry","newPosId","indexOf","getChipAttackArea","clearInterval","getAttackPower","Element","AT","at","list","panelsCount","effect","col","interval","level","positions","toString","index","atkElement","atkPower","defElement","totalAtkPower","ElementTypes","Neutral","Fire","Wood","Aqua","Elec","component","getAllAreaCombinations","combinationList","pattern","matrixIndexes","chip","allCombinations","Pattern","CP","supportChipsEffects","description","chipId"],"sourceRoot":""}